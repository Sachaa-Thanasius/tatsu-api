[build-system]
requires = ["setuptools"]
build-backend = "setuptools.build_meta"

[project]
name = "tatsu_api"
description = "An unofficial, async-ready wrapper for the Tatsu API."
readme = "README.md"
license = { file = "LICENSE" }
requires-python = ">=3.9"
version = "2.0.0.dev0"
keywords = ["python", "python-3", "tatsu", "tatsu-api"]
authors = [{ name = "Sachaa-Thanasius", email = "sachaathanasius@gmail.com" }]
classifiers = [
    "Development Status :: 3 - Alpha",
    "License :: OSI Approved :: MIT License",
    "Natural Language :: English",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3 :: Only",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Topic :: Internet",
    "Topic :: Software Development :: Libraries",
    "Topic :: Software Development :: Libraries :: Python Modules",
    "Topic :: Utilities",
    "Typing :: Typed",
]
dependencies = ["aiohttp>=3.8"]

[project.optional-dependencies]
speed = ["aiohttp[speedups]>=3.8"]
test = ["pytest", "pytest-asyncio"]
dev = ["pre-commit", "typing-extensions"]

[project.urls]
Homepage = "https://github.com/Sachaa-Thanasius/tatsu-api"
Issues = "https://github.com/Sachaa-Thanasius/tatsu-api/issues"
Source = "https://github.com/Sachaa-Thanasius/tatsu-api"

[tool.setuptools]
packages = ["tatsu_api"]

[tool.setuptools.package-data]
tatsu_api = ["py.typed"]


# -------- Test config

[tool.pytest.ini_options]
pythonpath = "src"
addopts = ["--import-mode=importlib", "--strict-markers", "--strict-config"]
asyncio_default_fixture_loop_scope = "module"


# -------- Linter config

[tool.ruff]
line-length = 120

[tool.ruff.lint]
select = [
    "F",
    "E",
    "I",
    "UP",
    "YTT",
    "ANN",
    "ASYNC",
    "S",
    "BLE",
    # "FBT",
    "B",
    "A",
    "COM",
    "C4",
    "DTZ",
    "T10",
    "EM",
    "ISC",
    "G",
    "INP",
    "PIE",
    "T20",
    "PYI",
    "PT",
    "RSE",
    "RET",
    "SIM",
    "TID",
    "PTH",
    "ERA",
    "PL",
    "TRY",
    "PERF",
    "FURB",
    "RUF",
]
ignore = [
    # ---- General
    "S101",    # Use of assert here is a known quantity for typing cases. All uses should be safe to optimize out.
    "SIM105",  # Suppressable exception. contextlib.suppress is a stylistic choice with overhead.
    "C90",     # McCabe complexity.
    "ANN204",  # Special method return types are usually implicit and/or known by type checker.
    "ANN401",  # Any is needed for some annotations.
    "UP038",   # isinstance performs better with tuples than unions.
    "PT001",   # pytest recommends against empty parentheses on pytest.fixture.
    "PD011",   # Erroneous issue that triggers for any .values attribute access at all.
    "PLR2004", # "Magic number" depends on the use case.
    "RUF002",  # "Ambiguous character" depends on the use case.
    "RUF003",  # "Ambiguous character" depends on the use case.
    "RUF022",  # __all__ ordering can be meaningful.
    "RUF023",  # __slots__ ordering can be meaningful.

    # ---- Recommended by Ruff when using Ruff format
    "E111",
    "E114",
    "E117",
    "E501",
    "COM812",
    "COM819",
    "ISC001",
    "ISC002",

    # ---- Project-specific
    # Readability
    "RET505", # el(se|if) after return.
]
unfixable = [
    "ERA", # Prevent unlikely erroneous deletion.
]

[tool.ruff.per-file-ignores]
"examples/*.py" = ["INP001", "T201"] # Leave the examples folder alone.
"test_tatsu.py" = [
    "ANN201", # Return annotations.
]

[tool.ruff.isort]
lines-after-imports = 2
combine-as-imports = true

[tool.ruff.lint.pyupgrade]
keep-runtime-typing = true


# -------- Type-checker config

[tool.pyright]
include = ["tatsu_api"]
pythonVersion = "3.9"
pythonPlatform = "All"
typeCheckingMode = "strict"

reportPrivateUsage = "none"
reportUnnecessaryIsInstance = "information"
reportCallInDefaultInitializer = "warning"
reportImportCycles = "information"
reportPropertyTypeMismatch = "error"
reportShadowedImports = "error"
reportUnnecessaryTypeIgnoreComment = "warning"
